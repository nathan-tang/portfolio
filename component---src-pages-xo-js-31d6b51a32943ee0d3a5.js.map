{"version":3,"sources":["webpack:///./src/components/xo-game/Game.js","webpack:///./src/pages/xo.js"],"names":["Game","useState","currentGameState","setGameState","winner","setWinner","active","setActive","firstMove","setFirstMove","isMovesLeft","b","i","j","evaluate","row","col","minimax","depth","isMax","score","best","Math","max","min","findBestMove","bestVal","bestMove","moveVal","setSquare","newArray","length","slice","move","className","onClick","XO","props","id","style","marginTop","to","position","top","left","padding"],"mappings":"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","file":"component---src-pages-xo-js-31d6b51a32943ee0d3a5.js","sourcesContent":["import  React, { useState } from \"react\";\r\n/*\r\n    board should look like this\r\n    initialBoardState = [\r\n        [\"_\",\"_\",\"_\"],\r\n        [\"_\",\"_\",\"_\"],\r\n        [\"_\",\"_\",\"_\"]\r\n    ]\r\n */\r\n\r\nconst Game = () => {\r\n    const [currentGameState, setGameState] = useState([['_','_','_'],['_','_','_'],['_','_','_']]);\r\n    const [winner, setWinner] = useState(\"\");\r\n    const [active, setActive] = useState(true);\r\n    const [firstMove, setFirstMove] = useState(true);\r\n\r\n    function isMovesLeft(b) {\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                if (b[i][j] === \"_\") {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function evaluate(b) {\r\n        // Checking for Rows for Winner\r\n        for (let row = 0; row < 3; row++) {\r\n            if (b[row][0] === b[row][1] &&\r\n                b[row][1] === b[row][2]) {\r\n                if (b[row][0] === \"X\") {\r\n                    return 10;\r\n                }\r\n                else if (b[row][0] === \"O\") {\r\n                    return -10;\r\n                }\r\n            }\r\n        }\r\n        // Checking Columns for Winner\r\n        for (let col = 0; col < 3; col++) {\r\n            if (b[0][col] === b[1][col] &&\r\n                b[1][col] === b[2][col]) {\r\n                if (b[0][col] === \"X\") {\r\n                    return 10;\r\n                }\r\n                else if (b[0][col] === \"O\") {\r\n                    return -10;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Checking Diagonals for Winner\r\n        if (b[0][0] === b[1][1] && b[1][1] === b[2][2]) {\r\n            if (b[0][0] === \"X\") { return 10; }\r\n            else if (b[0][0] === \"O\") { return -10; }\r\n        }\r\n\r\n        if (b[0][2] === b[1][1] && b[1][1] === b[2][0]) {\r\n            if (b[0][2] === \"X\") { return 10; }\r\n            else if (b[0][2] === \"O\") { return -10; }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function minimax(b, depth, isMax) {\r\n        let score = evaluate(b);\r\n\r\n        if (score === 10) {\r\n            return score;\r\n        }\r\n\r\n        if (score === -10) {\r\n            return score;\r\n        }\r\n\r\n        if (isMovesLeft(b) === false) {\r\n            return 0;\r\n        }\r\n\r\n        if (isMax) {\r\n            let best = -1000;\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                for (let j = 0; j < 3; j++) {\r\n                    if (b[i][j] === \"_\") {\r\n                        //Make Move\r\n                        b[i][j] = \"X\";\r\n\r\n                        best = Math.max(best, minimax(b, depth + 1, !isMax));\r\n\r\n                        // Undo the move\r\n                        b[i][j] = \"_\";\r\n                    }\r\n                }\r\n            }\r\n            return best;\r\n        }\r\n        else {\r\n            let best = 1000;\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                for (let j = 0; j < 3; j++) {\r\n                    if (b[i][j] === \"_\") {\r\n                        //Make Move\r\n                        b[i][j] = \"O\";\r\n\r\n                        best = Math.min(best, minimax(b, depth + 1, !isMax));\r\n\r\n                        // Undo the move\r\n                        b[i][j] = \"_\";\r\n                    }\r\n                }\r\n            }\r\n            return best;\r\n        }\r\n    }\r\n\r\n    function findBestMove(b) {\r\n        let bestVal = -1000;\r\n        let bestMove = {\r\n            row: -1,\r\n            col: -1\r\n        };\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                // Check if cell is empty\r\n                if (b[i][j] === '_') {\r\n                    // Make the move\r\n                    b[i][j] = \"O\";\r\n\r\n                    // compute evaluation function for this\r\n                    // move.\r\n                    let moveVal = minimax(b, 0, false);\r\n\r\n                    // Undo the move\r\n                    b[i][j] = '_';\r\n\r\n                    // If the value of the current move is\r\n                    // more than the best value, then update\r\n                    // best/\r\n                    if (moveVal > bestVal) {\r\n                        bestMove.row = i;\r\n                        bestMove.col = j;\r\n                        bestVal = moveVal;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return bestMove;\r\n    }\r\n\r\n    function setSquare(row, col) {\r\n        if (isMovesLeft(currentGameState) && currentGameState[row][col] === '_' && active) {\r\n            let newArray = [];\r\n            for (let i = 0; i < currentGameState.length; i++) {\r\n                newArray[i] = currentGameState[i].slice();\r\n            }\r\n\r\n            newArray[row][col] = 'O';\r\n            setGameState(newArray);\r\n\r\n            if (evaluate(newArray) === 10) {\r\n                setWinner(\"X\");\r\n                setActive(false);\r\n                return;\r\n            }\r\n\r\n            let bestMove = findBestMove(newArray);\r\n            if (bestMove.row === -1) {\r\n                setWinner(\"Draw\");\r\n                return;\r\n            }\r\n            newArray[bestMove.row][bestMove.col] = 'X';\r\n\r\n            setGameState(newArray);\r\n\r\n            if (evaluate(newArray) === -10) {\r\n                setWinner(\"O\");\r\n                setActive(false);\r\n            }\r\n\r\n            if (!isMovesLeft(newArray)) {\r\n                setWinner(\"Draw\");\r\n            }\r\n        }\r\n    }\r\n\r\n    if(firstMove) {\r\n        let newArray = [];\r\n        for (let i = 0; i < currentGameState.length; i++) {\r\n            newArray[i] = currentGameState[i].slice();\r\n        }\r\n\r\n        let move = findBestMove(newArray);\r\n        newArray[move.row][move.col] = 'X';\r\n        setGameState(newArray);\r\n        setFirstMove(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex\">\r\n            <button onClick={() => setSquare(0,0)}> {currentGameState[0][0]} </button>\r\n            <button onClick={() => setSquare(0,1)}> {currentGameState[0][1]} </button>\r\n            <button onClick={() => setSquare(0,2)}> {currentGameState[0][2]} </button>\r\n            <button onClick={() => setSquare(1,0)}> {currentGameState[1][0]} </button>\r\n            <button onClick={() => setSquare(1,1)}> {currentGameState[1][1]} </button>\r\n            <button onClick={() => setSquare(1,2)}> {currentGameState[1][2]} </button>\r\n            <button onClick={() => setSquare(2,0)}> {currentGameState[2][0]} </button>\r\n            <button onClick={() => setSquare(2,1)}> {currentGameState[2][1]} </button>\r\n            <button onClick={() => setSquare(2,2)}> {currentGameState[2][2]} </button>\r\n            <p> Winner: {winner}</p>\r\n        </div>\r\n    )\r\n};\r\n\r\n// function calculateWinner(squares) {\r\n//     const lines = [\r\n//         [0,1,2],\r\n//         [3,4,5],\r\n//         [6,7,8],\r\n//         [1,4,7],\r\n//         [2,5,8],\r\n//         [0,4,8],\r\n//         [2,4,6]\r\n//     ];\r\n//     for (let i = 0; i < lines.length; i ++) {\r\n//         const [a,b,c] = lines[i];\r\n//         if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\r\n//             return squares[a];\r\n//     }\r\n//     return null;\r\n// }\r\n//\r\n// const Game = () => {\r\n//     const [history, setHistory] = useState([Array(9).fill(null)]);\r\n//     const [stepNumber, setStepNumber] = useState(0);\r\n//     const [xIsNext, setXisNext] = useState(true);\r\n//     const winner = calculateWinner(history[stepNumber]);\r\n//     const xO = xIsNext ? \"X\" : \"O\";\r\n//\r\n//     const handleClick = (i) => {\r\n//         const historyPoint = history.slice(0, stepNumber + 1);\r\n//         const current = historyPoint[stepNumber];\r\n//         const squares = [...current];\r\n//         // return if won or occupied\r\n//         if (winner || squares[i]) return;\r\n//         // select square\r\n//         squares[i] = xO;\r\n//         setHistory([...historyPoint, squares]);\r\n//         setStepNumber(historyPoint.length);\r\n//         setXisNext(!xIsNext);\r\n//     };\r\n//\r\n//     const jumpTo = (step) => {\r\n//         setStepNumber(step);\r\n//         setXisNext(step % 2 === 0);\r\n//     };\r\n//\r\n//     // const renderMoves = () => (\r\n//     //     history.map((_step, move) => {\r\n//     //         const destination = move ? `Go to move #${move}` : \"Go to Start\";\r\n//     //         return (\r\n//     //             <li key={move}>\r\n//     //                 <button onClick={() => jumpTo(move)}>{destination}</button>\r\n//     //             </li>\r\n//     //         )\r\n//     //     })\r\n//     // );\r\n//\r\n//     return (\r\n//         <>\r\n//             <h1>React XO - With Hooks</h1>\r\n//             <div className=\"credit\"> template: codeSTACKr</div>\r\n//             <h3 className=\"text-center\">{winner ? \"Winner: \" + winner : \"Next Player: \" + xO}</h3>\r\n//             <Board squares={history[stepNumber]} onClick={handleClick} />\r\n//             <div className=\"text-center\">\r\n//                 <button onClick={() => jumpTo(0)}>Restart</button>\r\n//             </div>\r\n//         </>\r\n//     )\r\n// };\r\n\r\nexport default Game;","import React from \"react\";\r\nimport Game from \"../components/xo-game/Game\";\r\nimport { Link } from \"gatsby\";\r\nimport \"./css/xo.css\"\r\n\r\nfunction XO(props) {\r\n\r\n    return (\r\n        <div id=\"xo\" style={{marginTop: \"30px\"}}>\r\n            <Link to=\"/\" style={{position: \"absolute\", top: \"0\", left: \"0\", padding: \"20px\"}}>Go Back</Link>\r\n            <Game/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default XO;"],"sourceRoot":""}